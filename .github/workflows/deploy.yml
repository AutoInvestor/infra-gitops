name: E2E and Deploy to GKE

on:
  push:
    branches:
      - main

jobs:
  e2e-test:
    name: E2E Tests and Extract Digests
    runs-on: ubuntu-22.04
    outputs:
      publicapp_digest: ${{ steps.get_digest_publicapp.outputs.publicapp_digest }}
      backend_digests: ${{ steps.collect_backend_digests.outputs.backend_digests }}
      namespace: ${{ steps.load_namespace.outputs.namespace }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Load global namespace
        id: load_namespace
        run: |
          NAMESPACE=$(yq e '.namespace' config/deployment-config.yaml)
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT

      - name: Load configuration for public app
        id: load_public
        run: |
          PUBLIC_APP_NAME=$(yq e '.public_app.name' config/deployment-config.yaml)
          PUBLIC_APP_IMAGE=$(yq e '.public_app.image' config/deployment-config.yaml)
          PUBLIC_APP_VERSION=$(yq e '.public_app.version' config/deployment-config.yaml)
          PUBLIC_APP_PORT=$(yq e '.public_app.port' config/deployment-config.yaml)
          echo "PUBLIC_APP_NAME=$PUBLIC_APP_NAME" >> $GITHUB_ENV
          echo "PUBLIC_APP_IMAGE_FULL=${PUBLIC_APP_IMAGE}:${PUBLIC_APP_VERSION}" >> $GITHUB_ENV
          echo "PUBLIC_APP_PORT=$PUBLIC_APP_PORT" >> $GITHUB_ENV

      - name: Pull public app image
        id: publicapp_pull
        run: |
          docker pull "$PUBLIC_APP_IMAGE_FULL"

      - name: Get public app image digest
        id: get_digest_publicapp
        run: |
          PUBLICAPP_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$PUBLIC_APP_IMAGE_FULL")
          echo "publicapp_digest=$PUBLICAPP_DIGEST" >> "$GITHUB_OUTPUT"

      - name: Process backend images and extract digests
        id: collect_backend_digests
        run: |
          BACKEND_COUNT=$(yq e '.backends | length' config/deployment-config.yaml)
          declare -A DIGESTS
          for (( i=0; i<$BACKEND_COUNT; i++ )); do
            NAME=$(yq e ".backends[$i].name" config/deployment-config.yaml)
            IMAGE=$(yq e ".backends[$i].image" config/deployment-config.yaml)
            VERSION=$(yq e ".backends[$i].version" config/deployment-config.yaml)
            FULL_IMAGE="${IMAGE}:${VERSION}"
            docker pull "$FULL_IMAGE"
            DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$FULL_IMAGE")
            DIGESTS[$NAME]=$DIGEST
          done
          JSON="{"
          for key in "${!DIGESTS[@]}"; do
            JSON+="\"$key\":\"${DIGESTS[$key]}\","
          done
          JSON="${JSON%,}}"
          echo "backend_digests=$JSON" >> "$GITHUB_OUTPUT"

      - name: Run E2E Tests (external script)
        run: |
          chmod +x e2e/image-test.sh
          ./e2e/image-test.sh "$PUBLIC_APP_IMAGE_FULL"
          BACKEND_COUNT=$(yq e '.backends | length' config/deployment-config.yaml)
          for (( i=0; i<$BACKEND_COUNT; i++ )); do
            BACKEND_IMAGE=$(yq e ".backends[$i].image" config/deployment-config.yaml)
            BACKEND_VERSION=$(yq e ".backends[$i].version" config/deployment-config.yaml)
            FULL_IMAGE="${BACKEND_IMAGE}:${BACKEND_VERSION}"
            ./e2e/image-test.sh "$FULL_IMAGE"
          done

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-22.04
    needs: e2e-test

    env:
      NAMESPACE: ${{ needs.e2e-test.outputs.namespace }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GKE_PROJECT_ID }}
          install_components: 'kubectl'

      - name: Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_CLUSTER_ZONE }}
          project_id: ${{ secrets.GKE_PROJECT_ID }}

      - name: Substitute variables for Namespace
        run: |
          envsubst < manifests/namespace-template.yaml > manifests/namespace.yaml

      - name: Create Namespace
        run: |
          kubectl apply -f manifests/namespace.yaml

      - name: Substitute variables for public app
        run: |
          export APP_NAME=$PUBLIC_APP_NAME
          export IMAGE=$PUBLIC_APP_IMAGE_FULL
          export PORT=$PUBLIC_APP_PORT
          export NAMESPACE=$NAMESPACE

          envsubst < manifests/public-app-template.yaml > manifests/public-app.yaml

      - name: Generate backend manifests
        run: |
          rm -f manifests/backends.yaml
          BACKEND_COUNT=$(yq e '.backends | length' config/deployment-config.yaml)
          for (( i=0; i<$BACKEND_COUNT; i++ )); do
            APP_NAME=$(yq e ".backends[$i].name" config/deployment-config.yaml)
            IMAGE=$(yq e ".backends[$i].image" config/deployment-config.yaml)
            VERSION=$(yq e ".backends[$i].version" config/deployment-config.yaml)
            FULL_IMAGE="${IMAGE}:${VERSION}"
            PORT=$(yq e ".backends[$i].port" config/deployment-config.yaml)
            export APP_NAME
            export IMAGE="$FULL_IMAGE"
            export PORT
            export NAMESPACE
            envsubst < manifests/backend-template.yaml >> manifests/backends.yaml
          done

      - name: Combine all manifests
        run: |
          cat manifests/namespace.yaml manifests/public-app.yaml manifests/backends.yaml > manifests/all.yaml

      - name: Pin image digests in manifest
        env:
          BACKEND_DIGESTS: ${{ needs.e2e-test.outputs.backend_digests }}
          PUBLICAPP_DIGEST: ${{ needs.e2e-test.outputs.publicapp_digest }}
        run: |
          # Re-read public app image and version from config
          PUBLIC_APP_IMAGE=$(yq e '.public_app.image' config/deployment-config.yaml)
          PUBLIC_APP_VERSION=$(yq e '.public_app.version' config/deployment-config.yaml)
          PUBLIC_APP_IMAGE_FULL="${PUBLIC_APP_IMAGE}:${PUBLIC_APP_VERSION}"
          
          # Replace public app image with its digest
          sed -i "s|image: ${PUBLIC_APP_IMAGE_FULL}.*|image: ${PUBLICAPP_DIGEST}|" manifests/all.yaml
          
          # Process backend images: build an associative array of digests
          declare -A DIGEST_MAP
          for key in $(echo "$BACKEND_DIGESTS" | jq -r 'keys[]'); do
            value=$(echo "$BACKEND_DIGESTS" | jq -r --arg k "$key" '.[$k]')
            DIGEST_MAP[$key]=$value
          done
          
          # Replace each backend image with its digest
          for key in "${!DIGEST_MAP[@]}"; do
            sed -i "s|image: .*${key}.*|image: ${DIGEST_MAP[$key]}|" manifests/all.yaml
          done

      - name: Deploy all to GKE
        run: |
          kubectl apply -f manifests/all.yaml

      - name: Verify Deployments
        run: |
          kubectl rollout status deployment/$PUBLIC_APP_NAME -n $NAMESPACE
          BACKEND_COUNT=$(yq e '.backends | length' config/deployment-config.yaml)
          for (( i=0; i<$BACKEND_COUNT; i++ )); do
            NAME=$(yq e ".backends[$i].name" config/deployment-config.yaml)
            kubectl rollout status deployment/$NAME -n $NAMESPACE
          done

      - name: Get External IP for Public App
        run: |
          EXTERNAL_IP=""
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get svc $PUBLIC_APP_NAME -n $NAMESPACE --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$EXTERNAL_IP" ]; then
              break
            fi
            echo "Waiting for external IP..."
            sleep 10
          done
          if [ -z "$EXTERNAL_IP" ]; then
            echo "Timed out waiting for the external IP"
            exit 1
          fi
          echo "---------------------------------------------------"
          echo "Public app external IP: $EXTERNAL_IP"
          echo "Access the service at: http://${EXTERNAL_IP}:$PUBLIC_APP_PORT"
          echo "---------------------------------------------------"
